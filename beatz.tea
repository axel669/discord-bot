// check out https://www.npmjs.com/package/yt-search

let fs = require("fs")
let path = require("path")

let Discord = require("discord.js")
let ytdl = require("ytdl-core")
let fetch = require("node-fetch")
let update = require("@axel669/immutable-update")

let pi = require("./pi.js")

let express = require("express")

let newLine = String.fromCharCode(10)

let secretKey = process.env.sick_beats_settings_key
let settingsID = process.env.sick_beats_settings_id
let botToken = process.env.discord_bot_token

let saveSetings = (settings) => fetch(
    "https://api.jsonbin.io/b/${settingsID}"
    {
        method: "PUT"
        body: JSON.stringify(settings)
        headers: {
            "Content-Type": "application/json"
            "secret-key": secretKey
        }
    }
)

let commandText = {
    turkey: fs.readFileSync("./command-text/turkey.txt")
}

let conditional = (condition) =>
    (func) =>
        (...args) => {
            if condition(...args) == true {
                func(...args)
            }
        }

// update.addVerb(
//     "$popFront"
//     ([head, ...tail]) => tail
//     () => true
// )
update.actions.$popFront = ([head, ...tail]) => tail

let Settings = (data) => {
    let mut current = data
    return {
        get value() => current
        update(action, value) => {
            current = update(current, {[action]: value})
            saveSetings(current)
        }
    }
}

let appServer = express()
let appPort = process.env.PORT ?? 1337

appServer.get(
    "/"
    (req, res) => {
        res.send("Bot is running HYPERS")
    }
)
let publicServer = appServer.listen(
    appPort
    () => console.log(`Public server is running on port ${appPort}`)
)

(() => {
    let settings = Settings(
        await (await fetch(
            `https://api.jsonbin.io/b/${settingsID}/latest`
            {
                headers: {
                    "secret-key": secretKey
                }
            }
        )).json()
    )
    let client = Discord.Client*()
    let mut currentPlayer = null
    let playURL = (vc, url, volume, channel) => {
        let stream = ytdl(url, {filter: "audioonly"})

        let info = await ytdl.getBasicInfo(url)
        let details = info.player_response.videoDetails

        stream.on(
            "error"
            (err) => {
                console.log(`stream error with ${url}`)
                console.error(err)
                channel.send(`there was an error playing ${url}`)
            }
        )

        let player = vc.playStream(stream)

        player.setVolume(volume)
        player.on(
            "start"
            () => {
                channel.send(`now playing ${details.title}`)
            }
        )
        player.on(
            "end"
            (reason) => {
                console.log("stream ended")
                currentPlayer = null
                if reason != "user" {
                    settings.update("queue.$popFront")
                    if settings.value.queue.length > 0 {
                        currentPlayer = await playURL(
                            player.player.voiceConnection
                            settings.value.queue[0]
                            settings.value.volume
                            channel
                        )
                        return 0
                    }
                }
                player.player.voiceConnection.channel.leave()
            }
        )
        player.totalTime = parseInt(details.lengthSeconds) * 1000

        return player
    }

    let isPlaying = conditional(
        (msg) => currentPlayer != null
    )

    let commands = {
        shutdown() => {
            if currentPlayer != null {
                currentPlayer.end()
            }
            for [name, vc] in client.voiceConnections {
                vc.channel.leave()
            }
            client.destroy()
            publicServer.close()
        }
        play(msg, url) => {
            let id = msg.guild.id

            if client.voiceConnections.has(id) == false {
                if msg.member.voiceChannel == undefined {
                    return
                }
                msg.member.voiceChannel.join()
            }

            if url != undefined {
                settings.update("queue.$push", url)
                msg.channel.send("Song added to queue \\o/")
            }

            if (settings.value.queue.length > 0 && currentPlayer == null) {
                currentPlayer = await playURL(
                    client.voiceConnections.get(id)
                    settings.value.queue[0]
                    settings.value.volume
                    msg.channel
                )
            }
        }
        @@isPlaying
        pause(msg) => {
            currentPlayer.pause()
        }
        @@isPlaying
        resume(msg) => {
            currentPlayer.resume()
        }
        @@isPlaying
        stop(msg) => {
            currentPlayer.end()
        }
        @@isPlaying
        skip(msg) => {
            currentPlayer.end("skip")
        }
        @@isPlaying
        status(msg) => {
            let timeFormat = (time) => {
                let s = Math.floor(time / 1000)
                let m = Math.floor(s / 60)
                let h = Math.floor(m / 60)

                let seconds = `0${s % 60}`.slice(-2)
                let minutes = `0${m % 60}`.slice(-2)

                return `${h}:${minutes}:${seconds}`
            }

            let time = timeFormat(currentPlayer.time)
            let totalTime = timeFormat(currentPlayer.totalTime)

            msg.channel.send(
                `Song is at ${time}/${totalTime}`
            )
        }
        volume(msg, volume) => {
            if volume != undefined {
                let id = msg.guild.id
                let targetVolume = Math.min(volume, 100)

                let vol = parseFloat(volume) / 100
                if currentPlayer != null {
                    currentPlayer.setVolume(vol)
                }
                settings.update("volume.$set", vol)
            }
            msg.channel.send(`Volume set to ${settings.value.volume * 100}`)
        }
        join(msg) => msg.member.voiceChannel?.join()
        pie(msg) => msg.channel.send("ðŸ¥§")
        pi(msg, digitsString) => {
            let digits = parseInt(digitsString ?? "20")
            msg.channel.send("```${pi[0...digits + 2]}```")
        }
        queue(msg, command, ...args) => {
            switch command {
                case "clear" {
                    currentPlayer?.end()
                    settings.update("queue.$set", [])
                    msg.channel.send("queue has been cleared :thumbsup:")
                }
                case "list" {
                    let {queue} = settings.value

                    if queue.length == 0 {
                        msg.channel.send("queue is empty")
                    }
                    else {
                        let qlist = queue.map(
                            (url, index) => `${index + 1}. ${url}`
                        )
                        msg.channel.send("```${qlist.join(newLine)}```")
                    }
                }
            }
        }
        youtube(msg, command, ...args) => {
            if command == "premium" {
                msg.channel.send("Fuck off, Youtube Premium")
            }
        }
        turkey(msg) => msg.channel.send("ðŸ¦ƒ")
        mist(msg) => msg.channel.send("```\n${commandText.turkey}\n```")
        bacon(msg) => msg.channel.send("ðŸ¥“")
        wesley(msg) => msg.channel.send("Shut up, Wesley!")
    }

    let permissionInt = 3164160

    client.on(
        "ready"
        () => console.log(`${client.user.tag} is ready!`)
    )

    client.on(
        "message"
        (msg) => {
            if msg.member.user.tag == client.user.tag {
                return 0
            }
            if msg.channel.name != "sick-beats" {
                return 0
            }
            console.log(`${msg.member.user.tag}: ${msg.content}`)
            let msgBase = msg.content.replace(
                /^``?`?|`?`?`$/g
                ""
            )
            let msgText = msgBase.toLowerCase()
            console.log(`Read as: ${msgText}`)
            if msgText.startsWith("pls ") == true {
                let [command, ...args] = msgBase.split(/\s+/)[1...]
                commands[command.toLowerCase()]?(msg, ...args)
            }
        }
    )

    await client.login(botToken)
})()
