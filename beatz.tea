// check out https://www.npmjs.com/package/yt-search

let Discord = require("discord.js")
let ytdl = require("ytdl-core")
let fetch = require("node-fetch")
let update = require("immutable-update-values")

let pi = require("./pi.js")

let newLine = String.fromCharCode(10)

let secretKey = process.env.sick_beats_settings_key
let settingsID = process.env.sick_beats_settings_id
let botToken = process.env.discord_bot_token

let saveSetings = (settings) => fetch(
    "https://api.jsonbin.io/b/${settingsID}"
    {
        method: "PUT"
        body: JSON.stringify(settings)
        headers: {
            "Content-Type": "application/json"
            "secret-key": secretKey
        }
    }
)

let conditional = (condition) =>
    (func) =>
        (...args) => {
            if condition(...args) == true {
                func(...args)
            }
        }

update.addVerb(
    "$popFront"
    ([head, ...tail]) => tail
    () => true
)
let Settings = (data) => {
    let mut current = data
    return {
        get value() => current
        update(action, value) => {
            current = update(current, {[action]: value})
            saveSetings(current)
        }
    }
}

(() => {
    let settings = Settings(
        await (await fetch(
            "https://api.jsonbin.io/b/${settingsID}/latest"
            {
                headers: {
                    "secret-key": secretKey
                }
            }
        )).json()
    )
    let client = Discord.Client*()
    let mut currentPlayer = null
    let playURL = (vc, url, volume) => {
        let stream = ytdl(url, {filter: "audioonly"})
        let player = vc.playStream(stream)

        player.setVolume(volume)
        player.on(
            "end"
            (reason) => {
                currentPlayer = null
                if reason != "user" {
                    settings.update("queue.$popFront")
                    if settings.queue.length > 0 {
                        currentPlayer = playURL(
                            player.player.voiceConnection
                            settings.value.queue[0]
                            settings.value.volume
                        )
                        return 0
                    }
                }
                player.player.voiceConnection.channel.leave()
            }
        )

        return player
    }

    let isPlaying = conditional(
        (msg) => currentPlayer != null
    )

    let commands = {
        shutdown() => {
            if currentPlayer != null {
                currentPlayer.end()
            }
            for [name, vc] in client.voiceConnections {
                vc.channel.leave()
            }
            client.destroy()
        }
        play(msg, url) => {
            let id = msg.guild.id

            if client.voiceConnections.has(id) == false {
                if msg.member.voiceChannel == undefined {
                    return
                }
                msg.member.voiceChannel.join()
            }

            if url != undefined {
                settings.update("queue.$push", url)
            }

            if (settings.value.queue.length > 0) {
                currentPlayer = playURL(
                    client.voiceConnections.get(id)
                    settings.value.queue[0]
                    settings.value.volume
                )
            }
        }
        pause: isPlaying((msg) => {
            currentPlayer.pause()
        })
        resume: isPlaying((msg) => {
            currentPlayer.resume()
        })
        stop: isPlaying((msg) => {
            currentPlayer.end()
        })
        skip: isPlaying((msg) => {
            currentPlayer.end("skip")
        })
        volume(msg, volume) => {
            if volume != undefined {
                let id = msg.guild.id
                let targetVolume = Math.min(volume, 100)

                let vol = parseFloat(volume) / 100
                if currentPlayer != null {
                    currentPlayer.setVolume(vol)
                }
                settings.update("volume.$set", vol)
            }
            msg.channel.send("Volume set to ${settings.value.volume * 100}")
        }
        join(msg) => msg.member.voiceChannel?.join()
        pie(msg) => msg.channel.send("ðŸ¥§")
        pi(msg, digitsString) => {
            let digits = parseInt(digitsString ?? "20")
            msg.channel.send("```${pi[0...digits + 2]}```")
        }
        queue(msg, command, ...args) => {
            switch command {
                case "clear" {
                    currentPlayer?.end()
                    settings.update("queue.$set", [])
                    msg.channel.send("queue has been cleared :thumbsup:")
                }
                case "list" {
                    let {queue} = settings.value

                    if queue.length == 0 {
                        msg.channel.send("queue is empty")
                    }
                    else {
                        msg.channel.send("```${queue.join(newLine)}```")
                    }
                }
            }
        }
    }

    let permissionInt = 3164160

    client.on(
        "ready"
        () => console.log("${client.user.tag} is ready!")
    )

    client.on(
        "message"
        (msg) => {
            console.log("${msg.member.user.tag}:", msg.content)
            if msg.content.toLowerCase().startsWith("pls ") == true {
                let [command, ...args] = msg.content.split(/\s+/)[1...]
                commands[command.toLowerCase()]?(msg, ...args)
            }
        }
    )

    await client.login(botToken)
})()
